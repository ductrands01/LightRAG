services:
  lightrag:
    container_name: lightrag
    image: smartosc/lightrag:1.0.0
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-9621}:9621"
    volumes:
      - ./data/rag_storage:/app/data/rag_storage
      - ./data/inputs:/app/data/inputs
      - ./config.ini:/app/config.ini
      - ./.env:/app/.env
    env_file:
      - .env
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - lightrag_network
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  neo4j:
    image: neo4j:latest
    volumes:
        - ./neo4j_db/logs:/logs
        - ./neo4j_db/config:/config
        - ./neo4j_db/data:/data
        - ./neo4j_db/plugins:/plugins
    environment:
        - NEO4J_AUTH=neo4j/admin123
    ports:
      - "7474:7474"
      - "7687:7687"
    restart: always
    networks:
      - lightrag_network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -a neo4j://localhost:7687 -u neo4j -p admin123 'RETURN 1;' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4:9.4.0
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - lightrag_network

  postgres:
    image: pgvector/pgvector:pg17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-lightrag-db.sql:/docker-entrypoint-initdb.d/init-lightrag-db.sql
    restart: unless-stopped
    networks:
      - lightrag_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - lightrag_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_config:
  neo4j_plugins:
  pgadmin_data:
  postgres_data:
  redis_data:

networks:
  lightrag_network:
    driver: bridge